/* - CSS GENERAL - */
html {
  box-sizing: border-box;
  font-size: 16px;
  font-family: sans-serif;
  scroll-behavior: smooth;
}

*,
*::after,
*::before {
  box-sizing: inherit;
}

.item { /* debug */
  border: 1px solid red !important;
}

a[href="#top"] {
  margin: 1rem;
  display: block;
  font-size: 2rem;
  text-align: center;
  text-decoration: none;
}

p {
  margin: 0;
}

h2 {
  margin-top: 50vh;
  text-align: center;
}

img {
  margin: auto;
  display: block;
  max-width: 100%;
  height: auto;
}

.menu {
  margin-bottom: 100vh;
  font-size: 125%;
}

.menu li {
  margin-bottom: 1rem;
}

.container {
  margin: 0 auto;
  width: 80%;
  height: 80vh;
  background-color: #222;
  border: medium solid #000;
}

.item {
  padding: 1rem;
  font-size: 1.25rem;
  background-color: #666;
  border: medium solid #999;
}

/* --------- GRID EXPLÍCITO --------- */
/* 
  Con grid-template-columns definimos el número de columnas y sus anchos
  Con grid-template-rows definimos el número de filas y sus altos
 */
.grid-explicit {
  display: grid;

  /* Grid de 3 col x 3 filas */
  grid-template-columns: 50% 100px 1fr; /* Definir filas; 1fr (fracción) se define como el espacio sobrante */
  grid-template-rows: 2rem 20vh 30%; /* Definir el número de columnas */

  /* Con lo anterior, la primera fila (Grid de 1 a 3 - porque hay 3 columnas-) tiene 2rem de altura. La segunda (Grid de 4 a 6) tiene 20vh y la tercera (Grid de 7 a 9) tiene 30% */
  /* El resto de filas no se han definido, así que su altura se rige por el tamaño del contenido de los propios contenedores */

  /* Grid de 5 col x 4 filas */
  grid-template-columns: repeat(5, 20%);
  grid-template-rows: repeat(4, auto); /* Aquí tenemos 4 filas y su altura depende de su contenido */
  grid-template-rows: repeat(4, 25%); /* Aquí tenemos 4 filas iguales sin importar el contenido de las mismas */

  /* Grid de 4 col x 5 filas */
  grid-template-columns: 20% repeat(2, 30%) 20%; /* Repeat() solo funciona con elementos contiguos */
  grid-template-rows: repeat(5, auto);

  gap: 1vh 1vw; /* Distancia entre filas y distancia entre columnas */
  gap: 0;
}

/* ITEMS (HIJOS). POSICIONAMIENTO CON GRID LINES: los elementos se acomodan según las coordenadas */
/* Las líneas horizontales son relativas a las filas, y las verticales a las columnas */
.grid-explicit .item:nth-child(10) {
  color: cyan;

  /* De qué línea a qué linea ocupará la fila */
  grid-row-start: 2; 
  grid-row-end: 3;

  /* De qué linea a qué linea ocupará la columna */
  grid-column-start: 3;
  grid-column-end: 2;

  grid-row: 2 / 3; /* Shortcut: row-start/row-end */
  grid-column: 3 / 5; /* Shortcut: column-start/column-end. En este ejemplo, el elemento ocuparía dos espacios (como un combinar celdas en Excel) */

  grid-area: 2 / 3 / 3 / 5; /* Shorcut de grid-row y grid-column (grid-row-start / grid-row-end / grid-column-start / grid-column-end). OJO! esto no funciona cuando se le da nombre a las líneas */
}

/* Decir al elemento que ocupe varios espacios dependiendo de la posición donde se encuentre */
.grid-explicit .item:nth-child(12) {
  color: cyan;

  /* Ocupar 2 celdas en fila y 3 en columnas */
  grid-row: span 2; 
  grid-column: span 3;
}

.grid-explicit .item:nth-child(15) {
  color: cyan;

  grid-row: 1 / span 2; /* Empezar en la línea 1 y a partir de ahí desplazarse 3 filas hacia abajo */
  grid-column: 1 / span 2; /* Empezar en la línea 1 y desplazarse 3 elementos */
}

/* --------- GRID CON NOMBRES DE LÍNEA --------- */
.grid-line-names {
  display: grid;
  /* Grid de 3 columnas x 3 filas (esto quiere decir que tendrá 4 lineas de columna por 4 líneas de fila) */
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);

  /* Esto de aquí abajo es lo mismo que lo de arriba pero poniendo nombres a las líneas */
  grid-template-columns: [linea-c1] 1fr [linea-c2] 1fr [linea-c3] 1fr [linea-c4]; /* Ejemplo: [] 1fr [] 1fr [] 1fr [] - Los corchetes son las líneas que hay */
  grid-template-rows: [linea-r1] 1fr [linea-r2] 1fr [linea-r3] 1fr [linea-r4];
  grid-template-rows: [linea-r1] auto [linea-r2] auto [linea-r3] auto [linea-r4]; /* El valor automático está definido por la altura de contenido que tengan. Con esto todas las filas tendrán la misma altura */
}

.grid-line-names .item:nth-child(3) {
  color: cyan;

  grid-row: linea-r3 / linea-r4;
  grid-column: linea-c1 / linea-c4;
}

/* --------- GRID CON ÁREAS --------- */
.grid-areas {
  display: grid;

  /* Grid de 2 columnas x 3 filas */
  grid-template-columns: 1fr 200px;
  grid-template-rows: 100px repeat(2, 1fr) 50px;

  grid-template-areas: /* Definir nombres de las áreas */
    "header header"
    "content sidebar"
    "content ." /* Al poner punto hacemos que deje la celda vacia */
    "footer footer";
}

.header {
  grid-area: header; /* Aqui apuntamos al nombre del área definida en el padre (sin comillas) */
}

.content {
  grid-area: content;
}

.sidebar {
  grid-area: sidebar;
}

.footer {
  grid-area: footer;
}

/* --------- GRID IMPLÍCITA --------- */
.grid-implicit {
  display: grid;

  /* Grid de 4 columnas x 3 filas (con esto podría tener hasta 12 celdas, es el cálculo en el que hay que pensar siempre) */
  /* Como tengo 19 items, desde el 13 al 19 ya no estarían dentro de la cuadrícula */
  /* Es en estos casos donde nos ayuda la grid implícita */
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(3, 200px);

  /* IMPORTANTE!!! En este caso, la grid EXPLÍCITA sería la retícula de 4 x 3 (osea, desde el item 1 al 12)
  entonces los elementos posteriores se considerarían de la grid IMPLÍCITA */

  display: inline-grid; /* El modelo grid se aplicará pero como inline, haciendo que el contenedor ocupará solo el ancho necesario en la página y no toda */  
  /* Por ejemplo, si tenemos dos bloques con display inline-grid y hay espacio suficiente, los bloques compartirán espacio */
  /* Esto anterior funcionaría si damos a cada bloque un width de 40% por ejemplo. De esta manera cabrían en el espacio y lo compartirían */  
}

/* --------- FLUJO DE LA GRID --------- */
.grid-flow {
  display: grid;

  /* Grid de 5 columnas x 3 filas */
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(3, 150px);

  /* Determinar el flujo que va a seguir la cuadrícula */
  grid-auto-flow: column; /* Los elementos se acomodan en columnas */
  grid-auto-flow: row; /* Los elementos se acomodan en filas */
  /* Estas propiedades anteriores funcionan igual que en flexbox. Si el flujo es column en lugar de ser 5x3 sería 3x5 */

  /* La siguiente propiedad indica a los elementos el tamaño que deben tomar:
  Para los elementos que estén dentro de la grid explícita, tomará el tamaño indicado
  Para el resto, será automático y dependerá de su contenido */
  grid-auto-rows: auto; /* El valor por defecto es auto */
  grid-auto-rows: 100px; /* Todas las filas que se generen IMPLÍCITAMENTE tendrán 100px de altura */

  /* La siguiente propiedad funciona igual que la anterior pero con las columnas */
  grid-auto-flow: column; /* Los elementos se acomodan en columnas */
  grid-auto-columns: auto; /* Valor por defecto */
  grid-auto-columns: 50px;

  /* NOTAS:
  - Cuando tenemos grid-auto-flow: row, la fila respetará explícitamente el número de columnas que le hemos dado, y si a partir de eso los elementos no caben, se generará dinámicamente lo que se conoce como grid implícita 
  - Cuando tenemos grid-auto-flow: column, se respestará el número de filas que le hayamos dicho explícitamente y dinámicamente irá generando las columnas dependiendo el número de celdas (items) que tenga la grid */
}

/* --------- FLUJO DENSO DE LA GRID (aprovechar espacios vacíos) --------- */
.grid-flow-dense {
  display: grid;

  /* grid de 5columnas x 4 filas */
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(4, 200px);
  
  grid-auto-flow: row dense; /* sólo con row no abría cambio, pero con dense, los elementos que estaban vacios serán ocupados por los elementos que están inmediatamente después en caso de que quepan */
  grid-auto-flow: column dense;

  /* NOTA
  - Cuando el flujo está en fila, grid css genera tantas filas explícitamente como requiera y va a respetar el numero de columnas
  - Cuando el flujo está en columna, respetará explícitamente el número de filas y generará tantas columnas como se requiera */
}

.grid-flow-dense .item:nth-child(9) { /* queremos que este elemento ocupe 3 columnas y 3 celdas a partir de donde está */
  color: cyan;

  /* La siguiente forma de hacerlo no serviría porque lo que queremos es que parta desde su posición, y con esto se situaría según el tamaño que tuviera después del span */
  /* Como la grid explícita no podría generar una 6 columna, el elemento ya no cabría y lo llevaría a la siguiente fila */
  grid-row: span 3;
  grid-column: span 3;
}

/* --------- GRID ITEMS EN CAPAS (SUPERPOSICIÓN) --------- */
.grid-layers {
  display: grid;

  /* Grid de 4 columnas por 4 filas */
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);
}

.grid-layers .item:nth-child(1) {
  background-color: yellow;
  grid-column: 1/3;
  grid-row: 1/3;
}
.grid-layers .item:nth-child(2) {
  background-color: blue;
  grid-column: 3/5;
  grid-row: 1/3;
}
.grid-layers .item:nth-child(3) {
  background-color: orange;
  grid-column: 1/3;
  grid-row: 3/5;
}
.grid-layers .item:nth-child(4) {
  background-color: red;
  grid-column: 3/5;
  grid-row: 3/5;
}

/* Después de lo anterior ya tendremos la grid explícita de 4x4, por lo que el item 5 quedará fuera (en la grid implícita) */
.grid-layers .item:nth-child(5) { /* Con esto tendremos superpuesta esta capa sin necesidad de hacer nada más */
  background-color: green;
  grid-column: 2/4;
  grid-row: 2/4;
}

/* --------- ORDENAMIENTO DE GRID ITEMS --------- */
.grid-order {
  display: grid;

  /* Grid explícita de 3 columnas por 2 filas */
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);
}

.grid-order .item:nth-child(1) {
  order: 0; /* valor por defecto de todos los elementos. acepta números positivos o negativos (mientras más pequeño sea el numero estará más al inicio) */
  order: 1; /* esto llevará el item 1 a la posición del item 5 */
}

.grid-order .item:nth-child(2) {
  order: 2;
}

.grid-order .item:nth-child(5) {
  order: -1;
}

/* --------- ALINEAMIENTO DE GRID ITEMS --------- */
.grid-align {
  display: grid;

  /* Grid explícita de 3 columnas por 2 filas */
  grid-template-columns: repeat(3, 200px);
  grid-template-rows: repeat(2, 200px);
  justify-items: center; /* Esta propiedad trabaja sobre el eje X */
  align-items: center; /* Esta propiedad trabaja sobre el eje Y */
}

.grid-align .item:nth-child(4) {
  justify-self: end; /* Posicionar sólamente este elemento */
  align-self: start;
}

/* --------- ALINEAMIENTO DE GRID TRACKS --------- */
.grid-align-tracks {
  display: grid;

  /* Grid explícita de 3 columnas por 2 filas */
  grid-template-columns: repeat(3, 200px);
  grid-template-rows: repeat(2, 200px);

  /* Utilizaremos justify-content y align-content para alinear en X o Y la fila / columna completa */
  justify-content: space-evenly;
  align-content: space-evenly;
}

/* --------- TAMAÑOS MÁXIMOS Y MÍNIMOS DE GRID TRACKS --------- */
.grid-min-max {
  display: grid;

  /* Grid de 4 columnas por x filas (como por ejemplo en instagram o pinterest, en los que se van cargando nuevas filas al hacer scroll) */
  grid-template-columns: repeat(4, 1fr);
  grid-template-columns: repeat(4, minmax(100px, 200px)); /* minmax(tamaño mínimo, tamaño máximo de cada columna) */
  grid-template-columns: repeat(4, minmax(min-content, 200px)); /* Con min-content el tamaño mínimo será el tamaño del contenido */
  grid-template-columns: repeat(4, minmax(100px, min-content)); /* Lo mismo que el ejemplo anterior pero a la inversa */
  grid-template-columns: repeat(4, minmax(100px, max-content)); /* Lo mismo pero ocupando el tamaño máximo */
  grid-template-columns: repeat(4, minmax(min-content, max-content));

  /* Para entender min-content y max-content podemos pensar en el texto de los items del tipo "GRID ITEM 1"
  El contenido máximo será todo el texto junto a los espacios, sin salto de línea
  El contenido mínimo sería grid - salto de línea - item - salto de línea - 1 */
}

/* --------- GRID CON PATRONES REPETITIVOS --------- */
.grid-repeat {
  display: grid;

  /* Grid de 4 por x colums */
  grid-template-columns: repeat(1, 10% 20% 30% 40%); 
  /* La propiedad anterior repetirá solamente 1 vez ese patrón, por lo que cada fila tendrá las mismas columnas */
  /* Con esto podría hacerse algo del estilo Instagram */
}

/* --------- GRIDS DINÁMICAS --------- */
.grid-dynamics {
  display: grid;

  /* Sólo definiremos 4 columnas y dejaremos que grid defina las filas */
  grid-template-columns: repeat(4, 100px);
  grid-template-columns: repeat(auto-fill, 100px); /* Auto-fill rellena la grid con tracks generados dinámicamente */
  grid-template-columns: repeat(auto-fit, 100px); /* Ajusta la grid con los tracks existentes (esto es como un flex-grow!!!) */
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); /* Con esto podemos hacer responsive las columnas */
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); /* Aquí ya estaría funcionando el minmax, donde el máximo será 100px más el espacio sobrante dividido entre cada uno de los elementos. Con esto lo haremos responsive */
}

/* --------- RESPONSIVE SIN MEDIA QUERIES --------- */
.grid-responsive {
  display: grid;

  /* Con 280px simulamos una resolución mínima de 200px, por ejempo */
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* A los elementos que tiene disponibles, por lo tanto la cuadrícula dinámica se formará según el número de elementos */
  /* Con auto-fit le decimos que se repetirán tantas columnas como se necesite */
  /* Con la propiedad anterior la columna se adaptará a medida que el contenedor vaya teniendo más o menos espacio */

  gap: 1vw 1vw; /* Podemos agregar separación entre elementos */
}

/* --------- GRIDS ANIDADOS --------- */
.grid_nested {
  display: grid; 
}